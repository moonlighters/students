h1. Russian

Поддержка русского языка для Ruby и Rails при помощи библиотеки I18n.

Russian language support for Ruby and Rails, using I18n library.

h3. If you don't speak Russian

This code may still be useful for you and Ruby I18n community. You can learn how to create custom backends for I18n and how to provide support of "standalone" (as defined in "Unicode CLDR":http://unicode.org/cldr/) month names with I18n and Rails, and also how to add dead simple pluralization rules into your translation tables. This library also includes a module (@Russian@) with a set of helpers to provide simplistic pluralization and @strftime@ for Russian language -- in a way that is easier than using I18n methods.

Feel free to shoot an email to Yaroslav Markin ("yaroslav@markin.net":mailto:yaroslav@markin.net)

h1. Что это

Russian -- это библиотека для полноценной поддержки русского языка (форматирование даты и времени, плюрализация, локализация в целом) для Ruby и Ruby on Rails.

Цель проекта -- построить полноценную среду для русской локализации Ruby и Rails проектов, при этом используя минимально возможное количество хаков, сохраняя при этом поддержку локализации приложения на другие языки, а также форсировать включение в основную ветку I18n и Rails всех функций локализации, необходимых для работы с русским языком.

Russian использует библиотеку I18n (включена в поставку), несколько хаков поверх нее (собственный бекэнд с поддержкой специфичного для русского форматирования даты и времени, поддержкой плюрализации), несколько хаков поверх Rails (хаки хелперов даты-времени, хак для сообщений валидации) и файлы переводов, а также набор хелперов, упрощающий работу с русским языком (простая плюрализация, простой strftime и др.).

Russian стремится быть минимально деструктивной для окружения и быть полностью совместимой с другими языками (таким образом, когда приложение использует Russian и собственный бекэнд Russian, оно остается полностью совместимым с Rails i18n). 

h2. Что такое I18n

Библиотека I18n входит в состав Ruby on Rails начиная с версии 2.2. В перспективе I18n -- это самое простое и недеструктивное решение для локализации и интернационализации Rails приложений, но в текущей версии отсутствовала поддержка нескольких важных возможностей, специфичных для русского языка. Таким образом, русский язык для локализации в Rails 2.2 фактически не поддерживался.

Для исправления этого досадного недоразумения появилась библиотека Russian (подробнее см. _Использование_).

h1. Требования

* Ruby 1.8 (тестировалось на 1.8.6);
* Для использования с Rails нужна версия не ниже 2.2;
* Для тестирования библиотеки вам понадобится RSpec.

h1. Установка

Страница Russian на github -- "http://github.com/yaroslav/russian/":http://github.com/yaroslav/russian/

Russian можно установить как gem с github. Для этого:

1. Нужно добавить репозиторий gem'ов github в качестве источника

@gem sources -a http://gems.github.com@

2. Установить gem

@gem install yaroslav-russian@


_NB:_ Gem @russian@ также зеркалируется на RubyForge, поэтому его можно установить командой 

@gem install russian@.

h2. Ruby on Rails

Существует два варианта использования Russian вместе с Rails:

1. Установка gem

В файле @config/environment.rb@ сделайте ссылку на gem @yaroslav-russian@ с github:

<pre><code>
Rails::Initializer.run do |config|
  config.gem 'yaroslav-russian', :lib => 'russian', :source => 'http://gems.github.com'
end
</code></pre>

Чтобы установить gem, используйте команду 

@rake gems:install@.

2. Установка плагина

Для того, чтобы установить Russian как плагин к Rails, используйте команду

@script/plugin install git://github.com/yaroslav/russian.git@

Для Windows можно использовать версию git, расположенную по адресу: "http://code.google.com/p/msysgit/":http://code.google.com/p/msysgit/

h1. Использование

При загрузке Russian включает:

* библиотеку I18n если она еще не используется (например, если Russian используется отдельно от Rails)
* собственный класс для I18n бекэнда (полностью совместим со стандартным бекэндом)
* перегрузку хелперов даты для Rails (если Rails загружен)
* пререгрузку обработки сообщений валидации для ActiveRecord (если Rails загружен)

При инициализации:

* заменяется бэкэнд I18n со стандартного на собственный бекэнд Russian (@I18n::Backend::Advanced@)
* _NB:_ локаль русского языка (@:'ru'@) становится локалью по умолчанию
* загружаются все файлы переводов, в том числе переводы для Rails.

После этого можно использовать все стандартные функции библиотеки I18n, пользоваться измененным функционалом для лучшей поддержки русского языка, или использовать хелперы модуля Russian для еще более простой работы с русским языком.

h2. Отличия от стандартной библиотеки I18n

1. Поддержка двух видов названий месяцев -- контекст ("сентября") и отдельностоящее ("Сентябрь").

Для этого перегружена функция локализации, теперь название месяца используется в зависимости от контекста. В словарях Russian определены оба варианта.

Перегрузка недеструктивная: если для какого-то другого языка не определены два варианта названий месяцев, ошибки не возникнет.

Аналогично есть поддержка двух видов названий дней недели.

2. Плюрализация

Стандартно I18n поддерживается только плюрализация по английским правилам; бекэнд, использующийся в Russian, позволяет каждому языку определять правила плюрализации в таблице переводов, задавая их как @Proc@.

Перегрузка недеструктивная: если правила в таблице нет, используется правило по умолчанию (английский язык).

Правила для русского языка включены.

h1. Справочник

h2. Примеры и справка по переводам (I18n)

Небольшую справку по переводам (I18n) и пример того, как можно переводить имена моделей, атрибутов, и многие другие вещи, определенные в Rails или I18n, можно посмотреть в директории @lib/russian/locale@. Там находятся файлы переводов, которые используются в Russian, со всеми комментариями.

h2. Вспомогательные методы модуля Russian

<pre><code>
Russian.locale
Russian::LOCALE
</code></pre>

-- возвращает локаль русского языка (@:'ru'@).

<pre><code>
Russian::i18n_backend_class
</code></pre>

-- возвращает класс собственного бекенда I18n

<pre><code>
Russian::init_i18n
</code></pre>

-- инициализация Russian. Включение бекэнда, русский язык по умолчанию, загрузка переводов. 

_NB:_ Выполняется автоматически при загрузке.

<pre><code>
Russian::translate
Russian::t
</code></pre>

-- прокси для метода @translate@ I18n, форсирует использование русской локали.

<pre><code>
Russian::localize
Russian::l
</code></pre>

-- прокси для метода @localize@ I18n, форсирует использование русской локали.

<pre><code>
Russian::strftime

Russian::strftime(Time.now)
=> "Пн, 01 сент. 2008, 11:12:43 +0300"
Russian::strftime(Time.now, "%B")
=> "Сентябрь"
</code></pre>

-- @strftime@ с форсированием русской локали (упрощенный вариант @localize@)

<pre><code>
Russian::pluralize
Russian::p

Russian.p(1, "вещь", "вещи", "вещей")
=> "вещь"
Russian.p(2, "вещь", "вещи", "вещей")
=> "вещи"
Russian.p(10, "вещь", "вещи", "вещей")
=> "вещей"
Russian.p(3.14, "вещь", "вещи", "вещей", "вещи") # последний вариант используется для дробных величин
=> "вещи"
</code></pre>

-- упрощенная (без использования хешей I18n) плюрализация для русского языка

<pre><code>
Russian::transliterate
Russian::translit

Russian.translit("рубин")
=> "rubin"
Russian.translit("Hallo Юлику Тарханову")
=> "Hallo Yuliku Tarhanovu"
</code></pre>

-- транслитерация русских букв в строке.


h2. Ruby on Rails

h3. Переводы

При использовании с Ruby on Rails загружаются все стандартные переводы, и русский язык становится годным к использованию для локализации. В поставку включены все нужные переводы для ActionView, ActiveRecord, ActiveSupport, которые можно переопределять по необходимости стандартными средствами I18n.

h3. Хелперы

Хелперы даты-времени получают ключ @:use_standalone_month_names@ для форсирования отображения отдельностоящего названия месяца ("Сентябрь" а не "сентября"). Такое имя месяца используется когда включен ключ @:use_standalone_month_names@ (для отдельностоящего @select_month@ он включается по умолчанию), либо когда есть ключ @:discard_day@.

В Russian включен плагин i18n_label, который подставляет в форм-хелпер @label@ перевод атрибута из таблицы переводов I18n. Например:

* в файле переводов:

<pre><code>
ru:
  activerecord:
    attributes:
      user:
        name: "Имя"
</code></pre>

* во view:

<pre><code>
<% form_for @user do |f| %>
  <%= f.label :name %>
<% end %>
</code></pre>

Даст:

<pre><code>
<label for="user_name">Имя</label>
</code></pre>

h3. Валидация

До версии Rails 2.3.4 форматирование сообщений об ошибках не было гибким, и для нормального отображения ошибок на русском языке приходилось испольковать хаки. Если вы используете Rails 2.3.4 и выше, пропустите этот пункт (используйте ключ переводов @activerecord.errors.full_messages.format@).

Для Rails 2.3.3 и ниже обработка ошибок в ActiveRecord перегружается -- в Russian включен популярный плагин custom_error_message, с помощью которого можно переопределять стандартное отображение сообщений об ошибках. Так, например,

@validates_acceptance_of :accepted_terms, :message => 'нужно принять соглашение'@

даст сообщение

@Accepted terms нужно принять соглашение@

или, например

@Соглашение об использовании нужно принять соглашение@

если вы указали перевод для имени атрибута.
  
Но

@validates_acceptance_of :accepted_terms, :message => '^Нужно принять соглашение'@

даст сообщение

@Нужно принять соглашение@

_NB:_ в сообщениях валидации можно использовать такие макросы как @{{attribute}}@, @{{value}}@ -- подробнее см. документацию по I18n.

h3. Параметризация строк

Перегружается метод @parameterize@ инфлектора ActiveSupport (он же -- @String#parameterize@), теперь в нем идет транслитерация букв русского алфавита.

Пример:

<pre><code>
class Person
  def to_param
    "#{id}-#{name.parameterize}"
  end
end

@person = Person.find(1)
# => #<Person id: 1, name: "Дональд Кнут">

<%= link_to(@person.name, person_path(@person)) %>
# => <a href="/person/1-donald-knut">Дональд Кнут</a>
</code></pre>

h1. Авторы

Для сообщений об ошибках, обнаруженных неточностях и предложений:

* "Ярослав Маркин":http://yaroslav.markin.net ("yaroslav@markin.net":mailto:yaroslav@markin.net)

При участии:

* "Юлика Тарханова":http://julik.nl
* "Евгения Пименова":http://libc.st/
* "Дмитрия Смалько":http://github.com/dsmalko
* Alex Fortuna ("alex@askit.org":mailto:alex@askit.org)
* "Антона Агеева":http://blog.antage.name/
* "Александра Семенова":http://rotuka.com/

Огромное спасибо:

"Юлику Тарханову":http://julik.nl за "rutils":http://rutils.rubyforge.org/
